Laconic is a lightweight approach of adding some sanity to the
process of generating DOM content in JavaScript.

Consider using the standard DOM API to build and insert a simple table:

    var firstTh = document.createElement('th');
    firstTh.appendChild(document.createTextNode('first name'));
    var secondTh = document.createElement('th');
    secondTh.appendChild(document.createTextNode('first name'));
    var firstTr = document.createElement('tr');
    firstTr.appendChild(firstTh);
    firstTr.appendChild(secondTh);
    var firstTd = document.createElement('td'); 
    firstTd.appendChild(document.createTextNode('Joe'));
    var secondTd = document.createElement('td'); 
    secondTd.appendChild(document.createTextNode('Stelmach'));
    var secondTr = document.createElement('tr');
    secondTr.appendChild(firstTd);
    secondTr.appendChild(secondTd);
    var table = document.createElement('table');
    table.appendChild(firstTr);
    table.appendChild(secondTr);
    document.body.appendChild(table);

Now let's take a look at how to build the same table laconically:

    $el.table(
      $el.tr(
        $el.th('first name'),
        $el.th('last name')),
      $el.tr(
        $el.td('Joe'),
        $el.td('Stelmach'))
    ).appendTo(document.body);

A function exists in the $el namespace for all HTML tags listed here:
http://www.whatwg.org/specs/web-apps/current-work/multipage/section-index.html#elements-1 

You can even register your own custom 'tags' that defines a particular
hierarchy of known elements.  You just need to provide a name for 
your tag, and a function that appends content to 'this', which is a
reference to the root node of the tag.  For example, the 'foo' tag
will produce the following content:
    <div class='foo'>
      <div>bar</div>
      <div>baz</div>
    </div>

    $el.registerTag('foo', function() {
      this.appendChild($el.div('bar'));
      this.appendChild($el.div('baz'));
    });

Once you've registered a tag, you can start inserting them:

    $el.foo().appendTo(document.body);


